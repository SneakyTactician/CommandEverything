[33mcommit cc34c227f87963c1169f93d6b90e929a19c627c8[m
Author: SneakyTactician <sneakytactician@outlook.com>
Date:   Mon Jul 31 08:49:59 2017 -0500

    changes

[1mdiff --git a/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj b/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj[m
[1mindex 85a2e08..cc18ced 100644[m
[1m--- a/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj[m
[1m+++ b/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj[m
[36m@@ -169,6 +169,7 @@[m
     <ClInclude Include="ParsedCommand.h" />[m
     <ClInclude Include="stdafx.h" />[m
     <ClInclude Include="targetver.h" />[m
[32m+[m[32m    <ClInclude Include="UDAWrapper.h" />[m
     <ClInclude Include="Util.h" />[m
     <ClInclude Include="Writer.h" />[m
   </ItemGroup>[m
[36m@@ -194,6 +195,7 @@[m
       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Create</PrecompiledHeader>[m
       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>[m
     </ClCompile>[m
[32m+[m[32m    <ClCompile Include="UDAWrapper.cpp" />[m
     <ClCompile Include="Util.cpp" />[m
     <ClCompile Include="Writer.cpp" />[m
   </ItemGroup>[m
[1mdiff --git a/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj.filters b/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj.filters[m
[1mindex 381b945..51d5a45 100644[m
[1m--- a/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj.filters[m
[1m+++ b/CommandEverything/CommandEverythingCPP/CommandEverythingCPP.vcxproj.filters[m
[36m@@ -60,6 +60,9 @@[m
     <Filter Include="Framework\WIP Commands\Hack">[m
       <UniqueIdentifier>{34ac8ce0-2a83-4c61-9855-6ec56085fcdf}</UniqueIdentifier>[m
     </Filter>[m
[32m+[m[32m    <Filter Include="Framework\Util\CUDA">[m
[32m+[m[32m      <UniqueIdentifier>{81c6cf4d-5cbc-45ae-8c2a-e1e2a05fa36c}</UniqueIdentifier>[m
[32m+[m[32m    </Filter>[m
   </ItemGroup>[m
   <ItemGroup>[m
     <ClInclude Include="stdafx.h">[m
[36m@@ -119,6 +122,9 @@[m
     <ClInclude Include="CommandHack.h">[m
       <Filter>Framework\WIP Commands\Hack</Filter>[m
     </ClInclude>[m
[32m+[m[32m    <ClInclude Include="UDAWrapper.h">[m
[32m+[m[32m      <Filter>Framework\Util\CUDA</Filter>[m
[32m+[m[32m    </ClInclude>[m
   </ItemGroup>[m
   <ItemGroup>[m
     <ClCompile Include="stdafx.cpp">[m
[36m@@ -175,6 +181,9 @@[m
     <ClCompile Include="CommandHack.cpp">[m
       <Filter>Framework\WIP Commands\Hack</Filter>[m
     </ClCompile>[m
[32m+[m[32m    <ClCompile Include="UDAWrapper.cpp">[m
[32m+[m[32m      <Filter>Framework\Util\CUDA</Filter>[m
[32m+[m[32m    </ClCompile>[m
   </ItemGroup>[m
   <ItemGroup>[m
     <Text Include="file.txt">[m
[1mdiff --git a/CommandEverything/CommandEverythingCPP/CommandHack.cpp b/CommandEverything/CommandEverythingCPP/CommandHack.cpp[m
[1mindex ccb8ff5..6404a1d 100644[m
[1m--- a/CommandEverything/CommandEverythingCPP/CommandHack.cpp[m
[1m+++ b/CommandEverything/CommandEverythingCPP/CommandHack.cpp[m
[36m@@ -41,10 +41,6 @@[m [mvoid CommandHack::Attempt(string* attempt)[m
 	while (i != size)[m
 	{[m
 		next = attempt->at(i);[m
[31m- 		if (this->Length >= 3 || attempt->size() >= 2 && attempt->at(0) == '1' && attempt->at(1) == '*')[m
[31m-		{[m
[31m-			Sleep(500);[m
[31m-		}[m
 		ip.type = INPUT_KEYBOARD; [m
 		ip.ki.time = 0;[m
 		ip.ki.dwFlags = KEYEVENTF_UNICODE; // Specify the key as a Unicode character[m
[36m@@ -58,11 +54,6 @@[m [mvoid CommandHack::Attempt(string* attempt)[m
 		++i;[m
 	}[m
 [m
[31m-	if (this->Length == 3)[m
[31m-	{[m
[31m-		Sleep(500);[m
[31m-	}[m
[31m-[m
 	keybd_event(VK_RETURN, '5A', 0, 0);[m
 	keybd_event(VK_RETURN, '5A', KEYEVENTF_KEYUP, 0);[m
 [m
[36m@@ -72,7 +63,7 @@[m [mvoid CommandHack::Attempt(string* attempt)[m
 	{[m
 		keybd_event(VK_BACK, '66', 0, 0);[m
 		keybd_event(VK_BACK, '66', KEYEVENTF_KEYUP, 0);[m
[31m-		ab++;[m
[32m+[m		[32m++ab;[m
 	}[m
 }[m
 [m
[1mdiff --git a/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDADevelopment/CUDADevelopment.nvi b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDADevelopment/CUDADevelopment.nvi[m
[1mnew file mode 100644[m
[1mindex 0000000..841e62d[m
[1m--- /dev/null[m
[1m+++ b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDADevelopment/CUDADevelopment.nvi[m	
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32m<?xml version="1.0" encoding="utf-8"?>[m
[32m+[m[32m<nvi name="CUDADevelopment_${{version}}" title="${{title}}" version="${{version}}" versionText="${{version}}" timestamp="2017-01-17T15:49:46" hidden="UI" no-arp="false" disposition="demand" installerMin="2.1002.191.1621" allowsCustomPath="true">[m
[32m+[m	[32m<strings>[m
[32m+[m		[32m<string name="version" value="8.0"/>[m
[32m+[m		[32m<string name="altVersion" value="8_0"/>[m
[32m+[m		[32m<string name="DevelopmentRootDir" value="${{ProgramFiles}}\NVIDIA GPU Computing Toolkit\CUDA"/>[m
[32m+[m		[32m<string name="DevelopmentInstallDir" value="${{DevelopmentRootDir}}\v${{version}}"/>[m
[32m+[m		[32m<localized locale="0x0409">[m
[32m+[m			[32m<string name="title" value="CUDA Development"/>[m
[32m+[m			[32m<string name="arpDisplayName" value="NVIDIA ${{title}} ${{version}}"/>[m
[32m+[m		[32m</localized>[m
[32m+[m	[32m</strings>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<package type="requires" package="CUDAToolkit_${{version}}"/>[m
[32m+[m	[32m</dependencies>[m
[32m+[m	[32m<description/>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<bool name="FixedInstallLocation" value="true"/>[m
[32m+[m		[32m<string name="InstallLocation" value="${{DevelopmentInstallDir}}"/>[m
[32m+[m		[32m<string name="ArpDisplayName" value="${{arpDisplayName}}"/>[m
[32m+[m	[32m</properties>[m
[32m+[m	[32m<phases>[m
[32m+[m		[32m<standard phase="createDirectories">[m
[32m+[m			[32m<createDirectory target="${{@InstallLocation}}"/>[m
[32m+[m		[32m</standard>[m
[32m+[m		[32m<environment phase="setEnvVars">[m
[32m+[m			[32m<addVariable variableName="CUDA_PATH" value="${{@InstallLocation}}" type="system"/>[m
[32m+[m			[32m<addVariable variableName="CUDA_PATH_V${{altVersion}}" value="${{@InstallLocation}}" type="system"/>[m
[32m+[m		[32m</environment>[m
[32m+[m	[32m</phases>[m
[32m+[m[32m</nvi>[m
[1mdiff --git a/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDADocument/CUDADocument.nvi b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDADocument/CUDADocument.nvi[m
[1mnew file mode 100644[m
[1mindex 0000000..6568db2[m
[1m--- /dev/null[m
[1m+++ b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDADocument/CUDADocument.nvi[m	
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32m<?xml version="1.0" encoding="utf-8"?>[m
[32m+[m[32m<nvi name="CUDADocument_${{version}}" title="${{title}}" version="${{version}}" versionText="${{version}}" timestamp="2017-01-17T15:49:46" hidden="UI" no-arp="false" disposition="demand" installerMin="2.1002.191.1621" allowsCustomPath="true">[m
[32m+[m	[32m<strings>[m
[32m+[m		[32m<string name="version" value="8.0"/>[m
[32m+[m		[32m<string name="DocumentRootDir" value="${{ProgramFiles}}\NVIDIA GPU Computing Toolkit\CUDA"/>[m
[32m+[m		[32m<string name="DocumentInstallDir" value="${{DocumentRootDir}}\v${{version}}"/>[m
[32m+[m		[32m<localized locale="0x0409">[m
[32m+[m			[32m<string name="title" value="CUDA Documentation"/>[m
[32m+[m			[32m<string name="arpDisplayName" value="NVIDIA ${{title}} ${{version}}"/>[m
[32m+[m		[32m</localized>[m
[32m+[m	[32m</strings>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<package type="requires" package="CUDAToolkit_${{version}}"/>[m
[32m+[m	[32m</dependencies>[m
[32m+[m	[32m<description/>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<bool name="FixedInstallLocation" value="true"/>[m
[32m+[m		[32m<string name="InstallLocation" value="${{DocumentInstallDir}}"/>[m
[32m+[m		[32m<string name="ArpDisplayName" value="${{arpDisplayName}}"/>[m
[32m+[m	[32m</properties>[m
[32m+[m	[32m<phases>[m
[32m+[m		[32m<standard phase="createDirectories">[m
[32m+[m			[32m<createDirectory target="${{@InstallLocation}}"/>[m
[32m+[m		[32m</standard>[m
[32m+[m	[32m</phases>[m
[32m+[m[32m</nvi>[m
[1mdiff --git a/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDARuntimes/CUDARuntimes.nvi b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDARuntimes/CUDARuntimes.nvi[m
[1mnew file mode 100644[m
[1mindex 0000000..289d1a2[m
[1m--- /dev/null[m
[1m+++ b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDARuntimes/CUDARuntimes.nvi[m	
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m<?xml version="1.0" encoding="utf-8"?>[m
[32m+[m[32m<nvi name="CUDARuntimes_${{version}}" title="${{title}}" version="${{version}}" versionText="${{version}}" timestamp="2017-01-17T15:49:47" hidden="UI" no-arp="false" disposition="demand" installerMin="2.1002.191.1621" allowsCustomPath="false">[m
[32m+[m	[32m<strings>[m
[32m+[m		[32m<string name="version" value="8.0"/>[m
[32m+[m		[32m<localized locale="0x0409">[m
[32m+[m			[32m<string name="title" value="CUDA Runtime"/>[m
[32m+[m			[32m<string name="arpDisplayName" value="NVIDIA ${{title}} ${{version}}"/>[m
[32m+[m		[32m</localized>[m
[32m+[m	[32m</strings>[m
[32m+[m	[32m<description/>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<package type="requires" package="CUDAToolkit_${{version}}"/>[m
[32m+[m		[32m<package type="requires" package="CUDADevelopment_${{version}}"/>[m
[32m+[m	[32m</dependencies>[m
[32m+[m	[32m<description/>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<bool name="FixedInstallLocation" value="true"/>[m
[32m+[m		[32m<string name="ArpDisplayName" value="${{arpDisplayName}}"/>[m
[32m+[m	[32m</properties>[m
[32m+[m[32m</nvi>[m
[1mdiff --git a/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDASamples/0_Simple/UnifiedMemoryStreams/UnifiedMemoryStreams.cu b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDASamples/0_Simple/UnifiedMemoryStreams/UnifiedMemoryStreams.cu[m
[1mnew file mode 100644[m
[1mindex 0000000..487bb84[m
[1m--- /dev/null[m
[1m+++ b/CommandEverything/CommandEverythingCPP/External Libs/cuda_8.0.61_win10/CUDASamples/0_Simple/UnifiedMemoryStreams/UnifiedMemoryStreams.cu[m	
[36m@@ -0,0 +1,333 @@[m
[32m+[m[32m/*[m
[32m+[m[32m * Copyright 1993-2015 NVIDIA Corporation.  All rights reserved.[m
[32m+[m[32m *[m
[32m+[m[32m * Please refer to the NVIDIA end user license agreement (EULA) associated[m
[32m+[m[32m * with this source code for terms and conditions that govern your use of[m
[32m+[m[32m * this software. Any use, reproduction, disclosure, or distribution of[m
[32m+[m[32m * this software and related documentation outside the terms of the EULA[m
[32m+[m[32m * is strictly prohibited.[m
[32m+[m[32m *[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * This sample implements a simple task consumer using threads and streams[m
[32m+[m[32m * with all data in Unified Memory, and tasks consumed by both host and device[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// system includes[m
[32m+[m[32m#include <cstdio>[m
[32m+[m[32m#include <ctime>[m
[32m+[m[32m#include <vector>[m
[32m+[m[32m#include <algorithm>[m
[32m+[m[32m#ifdef USE_PTHREADS[m
[32m+[m[32m#include <pthread.h>[m
[32m+[m[32m#else[m
[32m+[m[32m#include <omp.h>[m
[32m+[m[32m#endif[m
[32m+[m[32m#include <stdlib.h>[m
[32m+[m
[32m+[m[32m// cuBLAS[m
[32m+[m[32m#include <cublas_v2.h>[m
[32m+[m
[32m+[m[32m// utilities[m
[32m+[m[32m#include <helper_cuda.h>[m
[32m+[m
[32m+[m[32m#if defined(WIN32) || defined(_WIN32) || defined(WIN64) || defined(_WIN64)[m
[32m+[m[32m// SRAND48 and DRAND48 don't exist on windows, but these are the equivalent functions[m
[32m+[m	[32mvoid srand48(long seed)[m
[32m+[m	[32m{[m
[32m+[m		[32msrand((unsigned int)seed);[m
[32m+[m	[32m}[m
[32m+[m	[32mdouble drand48()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn double(rand())/RAND_MAX;[m
[32m+[m	[32m}[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32mconst char *sSDKname = "UnifiedMemoryStreams";[m
[32m+[m
[32m+[m[32m// simple task[m
[32m+[m[32mtemplate <typename T>[m
[32m+[m[32mstruct Task[m
[32m+[m[32m{[m
[32m+[m[32m    unsigned int size, id;[m
[32m+[m[32m    T *data;[m
[32m+[m[32m    T *result;[m
[32m+[m[32m    T *vector;[m
[32m+[m
[32m+[m[32m    Task() : size(0), id(0), data(NULL), result(NULL), vector(NULL) {};[m
[32m+[m[32m    Task(unsigned int s) : size(s), id(0), data(NULL), result(NULL)[m
[32m+[m[32m    {[m
[32m+[m[32m        // allocate unified memory -- the operation performed in this example will be a DGEMV[m
[32m+[m[32m        checkCudaErrors(cudaMallocManaged(&data, sizeof(T)*size*size));[m
[32m+[m[32m        checkCudaErrors(cudaMallocManaged(&result, sizeof(T)*size));[m
[32m+[m[32m        checkCudaErrors(cudaMallocManaged(&vector, sizeof(T)*size));[m
[32m+[m[32m        checkCudaErrors(cudaDeviceSynchronize());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    ~Task()[m
[32m+[m[32m    {[m
[32m+[m[32m        // ensure all memory is deallocated[m
[32m+[m[32m        checkCudaErrors(cudaDeviceSynchronize());[m
[32m+[m[32m        checkCudaErrors(cudaFree(data));[m
[32m+[m[32m        checkCudaErrors(cudaFree(result));[m
[32m+[m[32m        checkCudaErrors(cudaFree(vector));[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    void allocate(const unsigned int s, const unsigned int unique_id)[m
[32m+[m[32m    {[m
[32m+[m[32m        // allocate unified memory outside of constructor[m
[32m+[m[32m        id = unique_id;[m
[32m+[m[32m        size = s;[m
[32m+[m[32m        checkCudaErrors(cudaMallocManaged(&data, sizeof(T)*size*size));[m
[32m+[m[32m        checkCudaErrors(cudaMallocManaged(&result, sizeof(T)*size));[m
[32m+[m[32m        checkCudaErrors(cudaMallocManaged(&vector, sizeof(T)*size));[m
[32m+[m[32m        checkCudaErrors(cudaDeviceSynchronize());[m
[32m+[m
[32m+[m[32m        // populate data with random elements[m
[32m+[m[32m        for (int i=0; i<size*size; i++)[m
[32m+[m[32m        {[m
[32m+[m[32m            data[i] = drand48();[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        for (int i=0; i<size; i++)[m
[32m+[m[32m        {[m
[32m+[m[32m            result[i] = 0.;[m
[32m+[m[32m            vector[i] = drand48();[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#ifdef USE_PTHREADS[m
[32m+[m[32mstruct threadData_t[m
[32m+[m[32m{[m
[32m+[m[32m    int tid;[m
[32m+[m[32m    Task<double> *TaskListPtr;[m
[32m+[m[32m    cudaStream_t *streams;[m
[32m+[m[32m    cublasHandle_t *handles;[m
[32m+[m[32m    int taskSize;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mtypedef struct threadData_t threadData;[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m
[32m+[m[32m// simple host dgemv: assume data is in row-major format and square[m
[32m+[m[32mtemplate <typename T>[m
[32m+[m[32mvoid gemv(int m, int n, T alpha, T *A, T *x, T beta, T *result)[m
[32m+[m[32m{[m
[32m+[m[32m    // rows[m
[32m+[m[32m    for (int i=0; i<n; i++)[m
[32m+[m[32m    {[m
[32m+[m[32m        result[i] *= beta;[m
[32m+[m
[32m+[m[32m        for (int j=0; j<n; j++)[m
[32m+[m[32m        {[m
[32m+[m[32m            result[i] += A[i*n+ j]*x[j];[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// execute a single task on either host or device depending on size[m
[32m+[m[32m#ifdef USE_PTHREADS[m
[32m+[m[32mvoid* execute(void* inpArgs)[m
[32m+[m[32m{[m
[32m+[m[32m    threadData *dataPtr    = (threadData *) inpArg